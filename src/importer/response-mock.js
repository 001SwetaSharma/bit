/* eslint-disable */
module.exports = [{"headers":{"version":"0.5.0"},"payload":[{"component":{"scope":"bit.promise","name":"promisify","box":"global","impl":{"file":"/** @flow */\n\n/**\n * Returns a function that will wrap the given node function with a promise. \n * Instead of taking a callback, the returned function will return a promise whose resolved in case \n * the second node function argument is falsy, in case the promise is resolved the \n * first argument will be passed.\n * The node function should conform to node.js convention of accepting a callback as last * * \n * argument and calling that callback with error as the first argument and success value \n * on the second argument. \n * @name promisify\n * @param {function} fn function to be wrapped as promise.\n * @returns {function} promisfied function\n * @example\n * ```js\n *  const read = promisify(fs.readFile);\n *  read('/path/to/file')\n *  .then(data => console.log(data))\n *  .catch(err => console.error(err));\n * ```\n */\nmodule.exports = function promisify(fn: (...args: any[]) => any) {\n  return (...args: any[]): Promise<any> => {\n    return new Promise((resolve, reject) => {\n      fn(...args, (err, res) => {\n        if (err) return reject(err);\n        return resolve(res);\n      });\n    });\n  };\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\n\nconst promisify = require(__impl__);\n\ndescribe('#promisify', () => {\n  it('should wrap errFn with a promise and expect a failure', () => {\n    const errFn = (cb) => {\n      cb(new Error());\n    };\n\n    promisify(errFn)().catch((err) => {\n      expect(err).to.deep.equal(new Error());\n    });\n  });\n\n  it('should wrap dataFn with a promise and expect string `foo`', () => {\n    const dataFn = (cb) => {\n      cb(null, 'foo');\n    };\n\n    promisify(dataFn)().then(str => expect(str).to.equal('foo'));\n  });\n});\n","name":"spec.js"},"dist":{"file":"{\"src\":\"\\\"use strict\\\";\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\n/**\\n * Returns a function that will wrap the given node function with a promise. \\n * Instead of taking a callback, the returned function will return a promise whose resolved in case \\n * the second node function argument is falsy, in case the promise is resolved the \\n * first argument will be passed.\\n * The node function should conform to node.js convention of accepting a callback as last * * \\n * argument and calling that callback with error as the first argument and success value \\n * on the second argument. \\n * @name promisify\\n * @param {function} fn function to be wrapped as promise.\\n * @returns {function} promisfied function\\n * @example\\n * ```js\\n *  const read = promisify(fs.readFile);\\n *  read('/path/to/file')\\n *  .then(data => console.log(data))\\n *  .catch(err => console.error(err));\\n * ```\\n */module.exports = function promisify(fn) {\\n  return function () {\\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    return new Promise(function (resolve, reject) {\\n      fn.apply(undefined, _toConsumableArray(args).concat([function (err, res) {\\n        if (err) return reject(err);\\n        return resolve(res);\\n      }]));\\n    });\\n  };\\n};\",\"mappings\":\";;;;AAEA;;;;;;;;;;;;;;;;;;GAmBAA,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,EAAnB,EAAgD;AAC/D,SAAO,YAAkC;AAAA,sCAA9BC,IAA8B;AAA9BA,UAA8B;AAAA;;AACvC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,6CAAMC,IAAN,UAAY,UAACI,GAAD,EAAMC,GAAN,EAAc;AACxB,YAAID,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;AACT,eAAOF,QAAQG,GAAR,CAAP;AACD,OAHD;AAID,KALM,CAAP;AAMD,GAPD;AAQD,CATD\"}","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487255358963","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"promisify","description":"Returns a function that will wrap the given node function with a promise. \nInstead of taking a callback, the returned function will return a promise whose resolved in case \nthe second node function argument is falsy, in case the promise is resolved the \nfirst argument will be passed.\nThe node function should conform to node.js convention of accepting a callback as last * * \nargument and calling that callback with error as the first argument and success value \non the second argument.","args":[{"description":"function to be wrapped as promise.","type":"function","name":"fn"}],"returns":{"description":"promisfied function","type":"function"},"access":"public","examples":[{"raw":"```js\n const read = promisify(fs.readFile);\n read('/path/to/file')\n .then(data => console.log(data))\n .catch(err => console.error(err));\n```","code":"```js\nconst read = promisify(fs.readFile);\nread('/path/to/file')\n.then(data => console.log(data))\n.catch(err => console.error(err));\n```"}],"static":false}],"ci":{"startTime":"1491156555230","endTime":"1491156638041"},"specsResults":{"tests":[{"title":"#promisify should wrap errFn with a promise and expect a failure","pass":true,"err":null,"duration":3},{"title":"#promisify should wrap dataFn with a promise and expect string `foo`","pass":true,"err":null,"duration":0}],"stats":{"start":"2017-04-02T18:10:37.954Z","end":"2017-04-02T18:10:37.975Z","duration":21},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"1"},"dependencies":[]}]},{"headers":{"version":"0.5.0"},"payload":[{"component":{"scope":"bit.utils","name":"values","box":"object","impl":{"file":"/** @flow */\nimport bit from 'bit-js';\n\nconst forEach = bit('object/foreach');\n\n/**\n * get all object values.\n * @name values\n * @param {object} object\n * @returns {[]} object's values\n * @example\n * ```js\n *  values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n * ```\n */\nmodule.exports = function values(object: {[any]: any}): any[] {\n  const objValues = [];\n  forEach(object, val => objValues.push(val)); \n  return objValues;\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\nimport bit from 'bit-js';\n\nbit.mockComponents({\n  'object/foreach': (obj, fn) => fn('foo')\n});\n\nconst values = require(__impl__);\n\nconst mock = { \n  a: 'foo',\n  b: 'bar'\n};\n\ndescribe('#values()', () => {\n  it('should return values `foo` from object', () => {\n    expect(values(mock)).to.deep.equal(['foo']);\n  });\n});\n","name":"spec.js"},"dist":{"file":"{\"src\":\"'use strict';\\n\\nvar _bitJs = require('bit-js');\\n\\nvar _bitJs2 = _interopRequireDefault(_bitJs);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar forEach = (0, _bitJs2.default)('object/foreach');\\n\\n/**\\n * get all object values.\\n * @name values\\n * @param {object} object\\n * @returns {[]} object's values\\n * @example\\n * ```js\\n *  values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\\n * ```\\n */\\n\\nmodule.exports = function values(object) {\\n  var objValues = [];\\n  forEach(object, function (val) {\\n    return objValues.push(val);\\n  });\\n  return objValues;\\n};\",\"mappings\":\";;AACA;;;;;;AAEA,IAAMA,UAAU,qBAAI,gBAAJ,CAAhB;;AAEA;;;;;;;;;;;AAUAC,OAAOC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,MAAhB,EAA6C;AAC5D,MAAMC,YAAY,EAAlB;AACAL,UAAQI,MAAR,EAAgB;AAAA,WAAOC,UAAUC,IAAV,CAAeC,GAAf,CAAP;AAAA,GAAhB;AACA,SAAOF,SAAP;AACD,CAJD\"}","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178628236","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":["bit.utils/object/foreach::1"],"docs":[{"name":"values","description":"get all object values.","args":[{"description":null,"type":"object","name":"object"}],"returns":{"description":"object's values","type":"[]"},"access":"public","examples":[{"raw":"```js\n values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n```","code":"```js\nvalues({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n```"}],"static":false}],"ci":{"startTime":"1491156515124","endTime":"1491156538014","error":{"errno":-2,"code":"NPM_INSTALL_ERR","syscall":"access","path":"/tmp/scope/node_modules/camelcase","name":"Error","message":"ENOENT: no such file or directory, access '/tmp/scope/node_modules/camelcase'","stack":"Error: ENOENT: no such file or directory, access '/tmp/scope/node_modules/camelcase'"}},"specsResults":{"tests":[{"title":"#values() should return values `foo` from object","pass":true,"err":null,"duration":2}],"stats":{"start":"2017-04-02T08:48:11.697Z","end":"2017-04-02T08:48:11.704Z","duration":7},"pass":true},"flattenedDependencies":["bit.utils/object/foreach::1"],"packageDependencies":{},"version":"1"},"dependencies":[{"scope":"bit.utils","name":"foreach","box":"object","impl":{"file":"/** @flow */\nexport type CbFn = (val: any, key: string|number) => void;\n\n/**\n * invoke `cb` function for every key within given object or array.\n * @name forEach\n * @param {object} obj object or array to iterate \n * @param {function} cb callback function to invoke\n * @example \n * ```js\n *  forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\n *  // => a 1 b 2 c 3\n * ```\n */\nmodule.exports = function forEach(obj: {[string|number]: any}, cb: CbFn) {\n  const keys = Object.keys(obj);\n  keys.forEach(key => cb(obj[key], key));\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\n\nconst forEach = require(__impl__);\n\ndescribe('#forEach()', () => {\n  const mock = {\n    a: 1,\n    b: 2,\n    c: 3\n  };\n\n  const mockArray = ['a', 'b', 'c', 'd'];\n\n  it('should invoke `cb` for every key within given object', () => {\n    const targetKeys = Object.keys(mock);\n    const invokedKeys = [];\n\n    forEach(mock, (val, key) => {\n      invokedKeys.push(key);\n    });\n\n    expect(targetKeys).to.deep.equal(targetKeys);\n  });\n\n  it('should invoke `cb` for every key within given array', () => {\n    const arrKeys = Object.keys(mockArray);\n    const invokedKeys = [];\n\n    forEach(mockArray, (val, key) => {\n      invokedKeys.push(key);\n    });\n\n    expect(arrKeys).to.deep.equal(invokedKeys);    \n  });\n});\n","name":"spec.js"},"dist":{"file":"{\"src\":\"\\\"use strict\\\";\\n\\n/**\\n * invoke `cb` function for every key within given object or array.\\n * @name forEach\\n * @param {object} obj object or array to iterate \\n * @param {function} cb callback function to invoke\\n * @example \\n * ```js\\n *  forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\\n *  // => a 1 b 2 c 3\\n * ```\\n */\\nmodule.exports = function forEach(obj, cb) {\\n  var keys = Object.keys(obj);\\n  keys.forEach(function (key) {\\n    return cb(obj[key], key);\\n  });\\n};\",\"mappings\":\";;AAGA;;;;;;;;;;;AAWAA,OAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAA8CC,EAA9C,EAAwD;AACvE,MAAMC,OAAOC,OAAOD,IAAP,CAAYF,GAAZ,CAAb;AACAE,OAAKH,OAAL,CAAa;AAAA,WAAOE,GAAGD,IAAII,GAAJ,CAAH,EAAaA,GAAb,CAAP;AAAA,GAAb;AACD,CAHD\"}","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178345233","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"forEach","description":"invoke `cb` function for every key within given object or array.","args":[{"description":"object or array to iterate","type":"object","name":"obj"},{"description":"callback function to invoke","type":"function","name":"cb"}],"returns":{},"access":"public","examples":[{"raw":"```js\n forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\n // => a 1 b 2 c 3\n```","code":"```js\nforEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));"}],"static":false}],"ci":{"startTime":"1491156538194","endTime":"1491156571537","error":{"errno":-116,"code":"NPM_INSTALL_ERR","syscall":"mkdir","path":"/tmp/scope/node_modules/.staging/camelcase-f1d3c524","fstream_type":"Directory","fstream_path":"/tmp/scope/node_modules/.staging/camelcase-f1d3c524","fstream_class":"DirWriter","fstream_stack":["/usr/lib/node_modules/bit-bin/node_modules/npm/node_modules/fstream/lib/dir-writer.js:35:25","/usr/lib/node_modules/bit-bin/node_modules/npm/node_modules/mkdirp/index.js:47:53","/usr/lib/node_modules/bit-bin/node_modules/npm/node_modules/graceful-fs/polyfills.js:264:29","FSReqWrap.oncomplete (fs.js:114:15)"],"name":"Error","message":"Unknown system error -116: Unknown system error -116, mkdir '/tmp/scope/node_modules/.staging/camelcase-f1d3c524'","stack":"Error: Unknown system error -116: Unknown system error -116, mkdir '/tmp/scope/node_modules/.staging/camelcase-f1d3c524'"}},"specsResults":{"tests":[{"title":"#forEach() should invoke `cb` for every key within given object","pass":true,"err":null,"duration":1},{"title":"#forEach() should invoke `cb` for every key within given array","pass":true,"err":null,"duration":1}],"stats":{"start":"2017-04-02T12:14:55.815Z","end":"2017-04-02T12:14:55.822Z","duration":7},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"1"}]}]}];